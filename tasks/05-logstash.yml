- hosts: WAS_LOGSTASH
  remote_user: root
  gather_facts: yes
  vars_files:
    - ../vars/main.yml
  vars:
    ansible_python_interpreter: /usr/bin/python3
  tasks:
    - name: Print error if not supported linux distribution is used for WAS_LOGSTASH installation
      fail: msg="You are trying to install WAS on not supported linux distribution. Please read the README file for details"
      when:
        - ansible_distribution_release != 'noble'
        - ansible_distribution_release != 'jammy'
        - ansible_distribution_release != 'focal'
        - ansible_distribution_release != 'bookworm'
        - ansible_distribution_release != 'bullseye'

    - name: Break if elasticsearch_kibana_version variable is set and elasticsearch/kibana version is less then 8.0 or greater than 9.0
      fail: msg="Elasticsearch/kibana version you defined in var/main.yml is not higher than 8.0 and lower than 9.0."
      when: elasticsearch_kibana_version is defined and (elasticsearch_kibana_version is version('8.0', '<', strict=True) or elasticsearch_kibana_version is version('9.0', '>=', strict=True))

    - name: Ensure dig and gpg are installed
      apt:
        update_cache: true
        name:
          - dnsutils
          - gpg
        state: present
      register: dnsutils_gpg_install_result
      until: dnsutils_gpg_install_result is not failed
      retries: 30
      delay: 20

    - name: Get WAS_LOGSTASH servers public IP
      uri:
        url: http://whatismyip.akamai.com
        method: GET
        timeout: 8
        return_content: yes
      changed_when: false
      register: public_ip
      until: public_ip.status == 200
      retries: 3
      delay: 10

    - name: Resolve A record for {{ was_server_hostname }}-logstash.{{ was_server_domainname }}
      shell: |
        dig +short {{ was_server_hostname }}-logstash.{{ was_server_domainname }}
      register: was_logstash_dns_record

    - name: Print error if no or wrong DNS record found for WAS_LOGSTASH FQDN
      fail: msg="There is no or wrong DNS record for {{ was_server_hostname }}-logstash.{{ was_server_domainname }}. It must be resolve to {{ public_ip.content }} which is not the case. Please read README for requirements"
      when: was_logstash_dns_record.stdout != public_ip.content

    - name: Add elsaticsearch apt signing key
      apt_key:
        url: https://artifacts.elastic.co/GPG-KEY-elasticsearch
        state: present
        keyring: /etc/apt/trusted.gpg.d/elasticsearch.gpg

    - name: Add elasticsearch 8.x apt repo
      apt_repository:
        repo: deb https://artifacts.elastic.co/packages/8.x/apt stable main
        state: present
        filename: elastic-8.x

    - name: Install system updates
      apt:
        upgrade: dist
        dpkg_options: 'force-confold,force-confdef'

    - name: Ensure all required packages are installed
      apt:
        update_cache: false
        name: 
          - curl
          - nginx
          - certbot
          - python3-certbot-nginx
          - python3-minimal
          - acl
        state: present
        dpkg_options: 'force-confold,force-confdef'

    - name: Find latest minor verions of elasticsearch/kibana/logstash if elasticsearch_kibana_version variable is set and no minor version specified
      shell: |
        apt-cache madison logstash | grep {{ elasticsearch_kibana_version }} | head -n1 | awk -F"|" '{print $2}' | tr -d ' '
      register: elasticsearch_kibana_version_latest
      when: elasticsearch_kibana_version is defined

    - name: Install logstash specific version if elasticsearch_kibana_version variable is set
      apt:
        update_cache: false
        name:
          - logstash={{ elasticsearch_kibana_version_latest.stdout }}
        state: present
        dpkg_options: 'force-confold,force-confdef'
      when: elasticsearch_kibana_version is defined

    - name: Prevent logstash packages from being upgraded if elasticsearch_kibana_version variable is set
      dpkg_selections:
        name: "{{ item }}"
        selection: hold
      with_items:
        - logstash
      when: elasticsearch_kibana_version is defined

    - name: Install latest logstash 8.x version if elasticsearch_kibana_version variable is not set
      apt:
        update_cache: false
        name:
          - logstash
        state: present
        dpkg_options: 'force-confold,force-confdef'
      when: elasticsearch_kibana_version is not defined

    - name: Remove useless packages from the cache
      apt:
        autoclean: yes

    - name: Remove dependencies that are no longer required
      apt:
        autoremove: yes

    - name: Copy all configuration files
      template:
        src: '{{ item.src }}'
        dest: '{{ item.dest }}'
        owner: '{{ item.owner }}'
        group: '{{ item.group }}'
        mode: '{{ item.mode }}'
      loop:
        - { src: '../templates/logstash-proxy.conf.j2', dest: '/etc/nginx/sites-available/logstash-proxy.conf', owner: 'root', group: 'root', mode: '0664' }
        - { src: '../templates/logstash-stream-proxy-dedicated.conf.j2', dest: '/etc/nginx/sites-available/logstash-stream-proxy.conf', owner: 'root', group: 'root', mode: '0664' }
        - { src: '../templates/logstash.yml.j2', dest: '/etc/logstash/logstash.yml', owner: 'root', group: 'root', mode: '0664'  }
        - { src: '../templates/pipelines.yml.j2', dest: '/etc/logstash/pipelines.yml', owner: 'root', group: 'root', mode: '0664'  }
        - { src: '../templates/beats-pipeline.conf.j2', dest: '/etc/logstash/conf.d/beats-pipeline.conf', owner: 'root', group: 'logstash', mode: '0660'  }
        - { src: '../templates/radius-pipeline.conf.j2', dest: '/etc/logstash/conf.d/radius-pipeline.conf', owner: 'root', group: 'logstash', mode: '0660'  }
        - { src: '../templates/dhcp-pipeline.conf.j2', dest: '/etc/logstash/conf.d/dhcp-pipeline.conf', owner: 'root', group: 'logstash', mode: '0660'  }

    - name: Enable nginx proxy configuration file 
      file:
        src: /etc/nginx/sites-available/logstash-proxy.conf
        dest: /etc/nginx/sites-enabled/logstash-proxy.conf
        owner: root
        group: root
        state: link

    - name: Disable nginx default config
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent

    - name: Reload nginx service
      service:
        name: nginx
        enabled: yes
        state: reloaded

    - name: Obtain letsencrypt certificate
      shell: |
        certbot --nginx --non-interactive --agree-tos --redirect -m "{{ letsencrypt_admin_email }}" -d "{{ was_server_hostname }}"-logstash."{{ was_server_domainname }}"

    - name: Grant user logstash read access to a directories in /etc/letsencrypt/live
      acl:
        path: /etc/letsencrypt/{{ item }}
        entity: logstash
        etype: user
        permissions: rx
        state: present
      with_items:
        - live
        - archive

    - name: Grant user logstash read access to a file /etc/letsencrypt/live/{{ was_server_hostname }}-logstash.{{ was_server_domainname }}/privkey.pem
      acl:
        path: /etc/letsencrypt/live/{{ was_server_hostname }}-logstash.{{ was_server_domainname }}/privkey.pem
        entity: logstash
        etype: user
        permissions: r
        state: present

    - name: Create streams.conf.d nginx directory
      file:
        path: /etc/nginx/streams.conf.d
        state: directory
        mode: '0755'

    - name: Enable nginx stream-proxy configuration file 
      file:
        src: /etc/nginx/sites-available/logstash-stream-proxy.conf
        dest: /etc/nginx/streams.conf.d/logstash-stream-proxy.conf
        owner: root
        group: root
        state: link

    - name: Include logstash stream-proxy configuration in nginx.conf
      lineinfile:
        path: /etc/nginx/nginx.conf
        line: include /etc/nginx/streams.conf.d/*.conf;

    - name: Reload nginx service
      service:
        name: nginx
        enabled: yes
        state: reloaded
 
    - name: Create radiuslogs/dhcplogs indices in elasticsearch
      uri:
        url: 'https://{{ was_server_hostname }}-elastic.{{ was_server_domainname }}/{{ item }}?pretty'
        user: elastic
        password: "{{ elastic_elasticsearch_password }}"
        method: PUT
        body: '{"settings" : {"index" : {"number_of_shards" : 3, "number_of_replicas" : 0 }}}'
        force_basic_auth: yes
        body_format: json
        timeout: 10
      with_items:
        - radiuslogs
        - dhcplogs
      no_log: true

    - name: Set logstash_system password for elasticsearch
      uri:
        url: https://{{ was_server_hostname }}-elastic.{{ was_server_domainname }}/_security/user/logstash_system/_password
        user: elastic
        password: "{{ elastic_elasticsearch_password }}"
        method: PUT
        body: '{"password":"{{ logstash_system_user_password }}"}'
        force_basic_auth: yes
        body_format: json
        timeout: 10
      no_log: true

    - name: Create logstash_writer role in elasticsearch
      uri:
        url: 'https://{{ was_server_hostname }}-elastic.{{ was_server_domainname }}/_security/role/logstash_writer_role?pretty'
        user: elastic
        password: "{{ elastic_elasticsearch_password }}"
        method: POST
        body: '{"cluster": ["monitor","manage_index_templates"],"indices": [{"names": ["radiuslogs","dhcplogs"],"privileges": ["write","create_index"],"field_security": {"grant": ["*"]}}],"run_as": [],"metadata": {},"transient_metadata": {"enabled": true}}'
        force_basic_auth: yes
        body_format: json
        timeout: 10
      no_log: true

    - name: Create logstash_writer user in elasticsearch
      uri:
        url: 'https://{{ was_server_hostname }}-elastic.{{ was_server_domainname }}/_security/user/logstash_writer?pretty'
        user: elastic
        password: "{{ elastic_elasticsearch_password }}"
        method: POST
        body: '{"username": "logstash_writer","roles": ["logstash_writer_role"],"full_name": null,"email": null,"password": "{{ logstash_writer_user_password }}","enabled": true}'
        force_basic_auth: yes
        body_format: json
        timeout: 10
      no_log: true

    - name: Create ILM policy for wifimon in elasticsearch
      uri:
        url: 'https://{{ was_server_hostname }}-elastic.{{ was_server_domainname }}/_ilm/policy/wifimon_policy?pretty'
        user: elastic
        password: "{{ elastic_elasticsearch_password }}"
        method: PUT
        body: '{"policy": {"phases": {"delete": {"min_age": "1d","actions": {"delete": {}}}}}}'
        force_basic_auth: yes
        body_format: json
        timeout: 10
      no_log: true

    - name: Apply ILM policy for wifimon in elasticsearch
      uri:
        url: 'https://{{ was_server_hostname }}-elastic.{{ was_server_domainname }}/_template/wifimon_template?pretty'
        user: elastic
        password: "{{ elastic_elasticsearch_password }}"
        method: PUT
        body: '{"index_patterns": ["radiuslogs", "dhcplogs"],"settings": {"index.lifecycle.name": "wifimon_policy"}}'
        force_basic_auth: yes
        body_format: json
        timeout: 10
      no_log: true

    - name: Enable and start logstash service
      service:
        name: logstash
        enabled: yes
        state: started
      register: logstash_service_status
      until: logstash_service_status is not failed
      delay: 30
      retries: 2

    - name: Wait for logstash service to become up and running
      uri:
        url: 'http://localhost:9600/?pretty'
        method: HEAD
        timeout: 10
        status_code: 200
      register: logstash_status
      until: logstash_status.status == 200
      delay: 30
      retries: 10
