- hosts: WAS_ELASTIC
  remote_user: root
  gather_facts: yes
  vars_files:
    - ../vars/main.yml
  vars:
    ansible_python_interpreter: /usr/bin/python3
  tasks:
    - name: Print error if not supported linux distribution is used for WAS_ELASTICSEARCH installation
      fail: msg="You are trying to install WAS on not supported linux distribution. Please read the README file for details"
      when:
        - ansible_distribution_release != 'noble'
        - ansible_distribution_release != 'jammy'
        - ansible_distribution_release != 'focal'
        - ansible_distribution_release != 'bookworm'
        - ansible_distribution_release != 'bullseye'

    - name: Print error if ansible versions is not equal or greater than 2.10.0
      fail: msg="Your ansible versions is older than 2.10.0. Ansible version 2.10 or greater is requred to run this playbook. Please read the README file for details"
      when: ansible_version.full is version('2.10.0', '<', strict=True)

    - name: Print error if not enough CPU/RAM resources available on target server
      fail: msg="You are trying to install WAS on server with lower CPU/RAM resources than required. Please read the README file for details"
      when: (ansible_processor_nproc < 4) or (ansible_memtotal_mb <= 7800)

    - name: Break if elasticsearch_kibana_version variable is set and elasticsearch/kibana version is less then 8.0 or greater than 9.0
      fail: msg="Elasticsearch/kibana version you defined in var/main.yml is not higher than 8.0 and lower than 9.0."
      when: elasticsearch_kibana_version is defined and (elasticsearch_kibana_version is version('8.0', '<', strict=True) or elasticsearch_kibana_version is version('9.0', '>=', strict=True))

    - name: Ensure dig and gpg are installed
      apt:
        update_cache: true
        name:
          - dnsutils
          - gpg
        state: present
      register: dnsutils_gpg_install_result
      until: dnsutils_gpg_install_result is not failed
      retries: 30
      delay: 20

    - name: Get WAS_ELASTIC servers public IP
      uri:
        url: http://whatismyip.akamai.com
        method: GET
        timeout: 8
        return_content: yes
      changed_when: false
      register: public_ip
      until: public_ip.status == 200
      retries: 3
      delay: 10

    - name: Resolve A record for {{ was_server_hostname }}-elastic.{{ was_server_domainname }}
      shell: |
        dig +short {{ was_server_hostname }}-elastic.{{ was_server_domainname }}
      register: was_elastic_dns_record

    - name: Print error if no or wrong DNS record found for WAS-ELASTIC FQDN
      fail: msg="There is no or wrong DNS record for {{ was_server_hostname }}-elastic.{{ was_server_domainname }}. It must be resolve to {{ public_ip.stdout }} which is not the case. Please read README for requirements"
      when: was_elastic_dns_record.stdout != public_ip.content

    - name: Add elsaticsearch apt signing key
      apt_key:
        url: https://artifacts.elastic.co/GPG-KEY-elasticsearch
        state: present
        keyring: /etc/apt/trusted.gpg.d/elasticsearch.gpg

    - name: Add elasticsearch 8.x apt repo
      apt_repository:
        repo: deb https://artifacts.elastic.co/packages/8.x/apt stable main
        state: present
        filename: elastic-8.x

    - name: Install system updates
      apt:
        update_cache: true
        upgrade: dist
        dpkg_options: 'force-confold,force-confdef'

    - name: Ensure all required packages are installed
      apt:
        update_cache: false
        name: 
          - curl
          - nginx
          - certbot
          - python3-certbot-nginx
          - python3-minimal
        state: present
        dpkg_options: 'force-confold,force-confdef'

    - name: Find latest minor verions of elasticsearch/kibana/logstash if elasticsearch_kibana_version variable is set and no minor version specified
      shell: |
        apt-cache madison elasticsearch | grep {{ elasticsearch_kibana_version }} | head -n1 | awk -F"|" '{print $2}' | tr -d ' '
      register: elasticsearch_kibana_version_latest
      when: elasticsearch_kibana_version is defined

    - name: Install elasticsearch specific version if elasticsearch_kibana_version variable is set
      apt:
        update_cache: false
        name:
          - elasticsearch={{ elasticsearch_kibana_version_latest.stdout }}
        state: present
        dpkg_options: 'force-confold,force-confdef'
      when: elasticsearch_kibana_version is defined

    - name: Prevent elasticsearch package from being upgraded if elasticsearch_kibana_version variable is set
      dpkg_selections:
        name: "{{ item }}"
        selection: hold
      with_items:
        - elasticsearch
      when: elasticsearch_kibana_version is defined

    - name: Install latest elasticsearch/logstash 8.x versions if elasticsearch_kibana_version variable is not set
      apt:
        update_cache: false
        name:
          - elasticsearch
        state: present
        dpkg_options: 'force-confold,force-confdef'

    - name: Remove useless packages from the cache
      apt:
        autoclean: yes

    - name: Remove dependencies that are no longer required
      apt:
        autoremove: yes

    - name: Copy all configuration files
      template:
        src: '{{ item.src }}'
        dest: '{{ item.dest }}'
        owner: '{{ item.owner }}'
        group: '{{ item.group }}'
        mode: '{{ item.mode }}'
      loop:
        - { src: '../templates/elastic-proxy.conf.j2', dest: '/etc/nginx/sites-available/elastic-proxy.conf', owner: 'root', group: 'root', mode: '0664' }
        - { src: '../templates/elasticsearch.yml.j2', dest: '/etc/elasticsearch/elasticsearch.yml', owner: 'root', group: 'elasticsearch', mode: '0660'  }
        - { src: '../templates/instances.yml.j2', dest: '/usr/share/elasticsearch/instances.yml', owner: 'root', group: 'elasticsearch', mode: '0660'  }

    - name: Enable nginx configuration files
      file:
        src: '{{ item.src }}'
        dest: '{{ item.dest }}'
        owner: root
        group: root
        state: link
      loop:
        - { src: '/etc/nginx/sites-available/elastic-proxy.conf', dest: '/etc/nginx/sites-enabled/elastic-proxy.conf' }

    - name: Disable nginx default config
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent

    - name: Reload nginx service
      service:
        name: nginx
        enabled: yes
        state: reloaded

    - name: Obtain letsencrypt certificate
      shell: |
        certbot --nginx --non-interactive --agree-tos --redirect -m "{{ letsencrypt_admin_email }}" -d "{{ was_server_hostname }}"-elastic."{{ was_server_domainname }}"

    - name: Generate random bootstrap password for elasticsearch
      shell: |
        openssl rand -hex 24
      register: elasticsearch_bootstrap_password

    - name: Set elasticsearch bootstrap password
      shell: |
        echo -n "{{ elasticsearch_bootstrap_password.stdout }}" | /usr/share/elasticsearch/bin/elasticsearch-keystore add bootstrap.password -xf

    - name: Enable and start elasticsearch service
      service:
        name: elasticsearch
        enabled: yes
        state: started
      register: elastic_service_status
      until: elastic_service_status is not failed
      delay: 30
      retries: 2

    - name: Wait for elasticsearch service to become up and running
      uri:
        url: 'https://{{ was_server_hostname }}-elastic.{{ was_server_domainname }}/_cluster/health'
        user: elastic
        password: "{{ elasticsearch_bootstrap_password.stdout }}"
        method: GET
        force_basic_auth: yes
        timeout: 10
        status_code: 200
      register: elastic_status
      until: elastic_status.status == 200
      delay: 30
      retries: 3
      no_log: true

    - name: Change password for elastic builtin user
      uri:
        url: https://{{ was_server_hostname }}-elastic.{{ was_server_domainname }}/_security/user/elastic/_password
        user: elastic
        password: "{{ elasticsearch_bootstrap_password.stdout }}"
        method: PUT
        body: '{"password":"{{ elastic_elasticsearch_password }}"}'
        force_basic_auth: yes
        body_format: json
        timeout: 10
      no_log: true

    - name: Tell elasticsearch that it is running on single node (do not enter in yellow status because of replica 0)
      uri:
        url: 'https://{{ was_server_hostname }}-elastic.{{ was_server_domainname }}/_all/_settings?preserve_existing=false'
        user: elastic
        password: "{{ elastic_elasticsearch_password }}"
        method: PUT
        body: '{"index.number_of_replicas" : "0"}'
        force_basic_auth: yes
        body_format: json
        timeout: 10
      register: elastic_replicas
      until: elastic_replicas.status == 200
      delay: 10
      retries: 3
      no_log: true
